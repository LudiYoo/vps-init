<Directory /var/www/vhosts>
    #
    # The Options directive controls which server features are available in a particular directory.
    #
    # All
    #   All options except for MultiViews
    # None
    #   None of the extra features are enabled
    # ExecCGI
    #   Execution of CGI scripts using mod_cgi is permitted.
    # FollowSymLinks
    #   The server will follow symbolic links in this directory.
    # Includes
    #   Server-side includes provided by mod_include are permitted.
    # IncludesNOEXEC
    #   Server-side includes are permitted, but the #exec cmd and #exec cgi are disabled.
    #   It is still possible to #include virtual CGI scripts from ScriptAliased directories.
    # Indexes
    #   If a URL which maps to a directory is requested and there is no DirectoryIndex (e.g., index.html)
    #   in that directory, then mod_autoindex will return a formatted listing of the directory.
    # MultiViews
    #   Content negotiated "MultiViews" are allowed using mod_negotiation.
    # SymLinksIfOwnerMatch
    #   The server will only follow symbolic links for which the target file or directory
    #   is owned by the same user id as the link.
    Options None +FollowSymLinks

    #
    # AllowOverride controls what directives may be placed in .htaccess files.
    #
    # All
    #   Any directive which has the .htaccess Context is allowed in .htaccess files.
    # None
    #   The server will not even attempt to read .htaccess files in the filesystem.
    # AuthConfig
    #   Allow use of the authorization directives
    # FileInfo
    #   Allow use of the directives controlling document types.
    # Indexes
    #   Allow use of the directives controlling directory indexing
    # Limit
    #   Allow use of the directives controlling host access
    AllowOverride All

    #
    # All hosts are allowed to access
    # Restrict can be set e.g.
    # Allow from example.org
    # Deny from foo.example.org
    #
    Order allow,deny
    Allow from all

    #
    # Deny all methods expect those mentioned here
    # @mod allowmethods
    #
    # GET
    #   Requests a representation of the specified resource; should only retrieve data.
    # HEAD
    #   Asks for a response identical to that of a GET request, but without the response body.
    # POST
    #   Submit an entity to the specified resource, often causing a change in state or side effects on the server.
    # PUT
    #   Replaces all current representations of the target resource with the request payload.
    # DELETE
    #   Deletes the specified resource.
    # CONNECT
    #   Establishes a tunnel to the server identified by the target resource.
    # OPTIONS
    #   Describe the communication options for the target resource.
    # TRACE
    #   Performs a message loop-back test along the path to the target resource.
    # TRACK
    #   Something Microsoft cooked up that performs essentially the same thing that TRACE does
    #   with the exception that it never got used—except by
    #   penetration testers, hackers, worms, and vulnerability scanners.
    # PATCH
    #   Apply partial modifications to a resource.
    AllowMethods GET POST
</Directory>

#
# ServerTokens
# This directive configures what you return as the Server HTTP response
# Header. The default is 'Full' which sends information about the OS-Type
# and compiled in modules.
# Set to one of:  Full | OS | Minimal | Minor | Major | Prod
# where Full conveys the most information, and Prod the least.
ServerTokens Prod

#
# Optionally add a line containing the server version and virtual host
# name to server-generated pages (internal error documents, FTP directory
# listings, mod_status and mod_info output etc., but not CGI generated
# documents or custom error documents).
# Set to "EMail" to also include a mailto: link to the ServerAdmin.
# Set to one of:  On | Off | EMail
ServerSignature Off

#
# Prevent Denial of Service (DoS) attacks
# Timeout: The number of seconds before receives and sends time out
# Default 300
Timeout 60

#
# Allow TRACE method
#
# Set to "extended" to also reflect the request body (only for testing and
# diagnostic purposes).
#
# Set to one of:  On | Off | extended
TraceEnable Off

#
# The FileETag directive configures the file attributes that are used
# to create the ETag (entity tag) response header field when the document
# is based on a static file.
# But it allows remote attackers to obtain sensitive information like inode number,
# multipart MIME boundary, and child process through Etag header.
# And ETag for the exact same component won’t match from one server to another.
# If the ETags don’t match, the user doesn’t receive the small, fast 304 response
# A conditional GET request is still made whenever the user hits Reload or Refresh
# So sending ETag headers negatively impacts the performance
# Instead of ETAG use Cache-Control headers
FileETag None

#
# This directive enables DNS lookups so that host names can be logged
# (and passed to CGIs/SSIs in REMOTE_HOST).
# Disable it in order to save the network traffic if no reverse lookups is needed
# HostnameLookups On | Off | double
HostnameLookups Off

# This directive controls how Apache forms URLs that refer to itself
# On: hostname and port used in the redirect will be those set by ServerName and port
# Off: name and port used will be the ones in the original request
# DNS: Reverse DNS Lookup of IP adress to discover domain name
# UseCanonicalName On | Off | DNS
UseCanonicalName Off


########################
#                      #
### Security Headers ###
#                      #
########################

# @mod headers

#
# ETag is disabled, so remove the header
Header unset ETag

#
# Remove the Server header in response to disguise which webserver is used
Header unset Server

#
# Set cookies HttpOnly & Secure
# Using the HttpOnly flag when generating a cookie helps mitigate
# the risk of client side script accessing the protected cookie
# By setting the secure flag, the browser will prevent the transmission
# of a cookie over an unencrypted channel.
Header edit Set-Cookie ^(.*)$ $1;HttpOnly;Secure

#
# Setting this header will prevent MSIE from interpreting files as something
# else than declared by the content type in the HTTP headers.
# @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
Header set X-Content-Type-Options nosniff

#
# Setting this header will prevent other sites from embedding pages from this
# site as frames. This defends against clickjacking attacks.
# @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
Header set X-Frame-Options: "sameorigin"

#
# The HTTP Strict-Transport-Security response header (often abbreviated as HSTS)
# lets a web site tell browsers that it should only
# be accessed using HTTPS, instead of using HTTP.
# @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
Header set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

#
# The Referrer-Policy HTTP header controls how much referrer information
# (sent via the Referer header) should be included with requests.
# @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
Header set Referrer-Policy "no-referrer-when-downgrade"

#
# The HTTP Content-Security-Policy (CSP) response header allows web site administrators to control
# resources the user agent is allowed to load for a given page.
# With a few exceptions, policies mostly involve specifying server origins and script endpoints.
# This helps guard against cross-site scripting attacks (XSS).
# @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
Header set Content-Security-Policy: "default-src 'self'"

#
# The HTTP Feature-Policy header provides a mechanism to allow
# and deny the use of browser features in its own frame
# @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy
Header set Feature-Policy: "camera: 'none'; vr: 'none'; microphone: 'none';  payment: 'none'; midi: 'none'; microphone: 'none'"